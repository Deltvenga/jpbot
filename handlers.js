/**
 * @file handlers.js
 * @description –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */

// --- –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π ---
const bot = require('./botInstance');
const { readDb, writeDb, initUser } = require('./database');
const { updateCardSrs } = require('./srs');
const { getCardStatus } = require('./utils');
const csv = require('csv-parser');

const CARDS_PER_PAGE = 8; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ

// =================================================================
//  –ì–ª–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞)
// =================================================================

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã.
 * @param {TelegramBot.Message} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.
 */
const messageHandler = (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text) return;

    if (text.startsWith('/')) {
        if (text === '/start') {
            handleStart(msg);
        }
        return;
    }

    const user = readDb()[chatId] || initUser(chatId);

    if (user.state) {
        handleState(msg);
        return;
    }

    switch (text) {
        case 'üß† –ò–∑—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏':
            promptStudyMethod(chatId);
            break;
        case 'üóÇÔ∏è –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏':
            promptViewCards(chatId);
            break;
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É':
            startAddCardProcess(chatId);
            break;
        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            showSettings(chatId);
            break;
        case 'üì§ –≠–∫—Å–ø–æ—Ä—Ç':
            exportCards(chatId);
            break;
        case 'üì• –ò–º–ø–æ—Ä—Ç':
            promptImportMethod(chatId);
            break;
        case '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            handleState(msg);
            break;
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (callback_query).
 * @param {TelegramBot.CallbackQuery} callbackQuery - –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
 */
const callbackHandler = (callbackQuery) => {
    const { data } = callbackQuery;
    const [action] = data.split('_');

    switch (action) {
        case 'study':
            handleStudyCallback(callbackQuery);
            break;
        case 'view':
            handleViewCallback(callbackQuery);
            break;
        case 'delete':
            handleDeleteCallback(callbackQuery);
            break;
        case 'flip':
            flipCard(callbackQuery);
            break;
        case 'rate':
            rateCard(callbackQuery);
            break;
        case 'settings':
            handleSettingsCallback(callbackQuery);
            break;
        // --- –í–û–¢ –û–ù–û, –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–û–ó–í–†–ê–©–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ---
        case 'import':
            handleImportCallback(callbackQuery);
            break;
        default:
            bot.answerCallbackQuery(callbackQuery.id);
            break;
    }
};


// =================================================================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é
// =================================================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∏–º–ø–æ—Ä—Ç–∞: —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.
 * @param {number} chatId - ID —á–∞—Ç–∞.
 */
const promptImportMethod = (chatId) => {
    bot.sendMessage(chatId, '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏?', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìé –§–∞–π–ª–æ–º', callback_data: 'import_method_file' }],
                [{ text: 'üìù –¢–µ–∫—Å—Ç–æ–º', callback_data: 'import_method_text' }]
            ]
        }
    });
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * @param {TelegramBot.Message} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
const handleStart = (msg) => {
    const chatId = msg.chat.id;
    initUser(chatId);
    bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–ø–æ–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.`, {
        reply_markup: {
            keyboard: [
                ['üß† –ò–∑—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏', 'üóÇÔ∏è –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏'],
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
                ['üì§ –≠–∫—Å–ø–æ—Ä—Ç', 'üì• –ò–º–ø–æ—Ä—Ç']
            ],
            resize_keyboard: true,
        },
    });
};

/**
 * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.
 * @param {number} chatId - ID —á–∞—Ç–∞.
 */
const startAddCardProcess = (chatId) => {
    const db = readDb();
    db[chatId].state = 'awaiting_japanese';
    writeDb(db);
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –Ω–∞ —è–ø–æ–Ω—Å–∫–æ–º:');
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–∑—É—á–µ–Ω–∏—è.
 * @param {number} chatId - ID —á–∞—Ç–∞.
 */
const promptStudyMethod = (chatId) => {
    bot.sendMessage(chatId, '–ö–∞–∫ –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å?', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìö –ü–æ —Ç–µ–º–∞–º', callback_data: 'study_by_topic' }],
                [{ text: 'üî• –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (–≤—Å–µ —Ç–µ–º—ã)', callback_data: 'study_due_all' }],
                [{ text: 'üé≤ –í—Å–µ –ø–æ–¥—Ä—è–¥ (—Å–ª—É—á–∞–π–Ω–æ)', callback_data: 'study_random_all' }]
            ]
        }
    });
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
 * @param {number} chatId - ID —á–∞—Ç–∞.
 */
const promptViewCards = (chatId) => {
    bot.sendMessage(chatId, '–ö–∞–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üü¢ –ò–∑—É—á–µ–Ω–Ω—ã–µ', callback_data: 'view_status_learned_page_0' }],
                [{ text: 'üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ', callback_data: 'view_status_progress_page_0' }],
                [{ text: 'üî¥ –ù–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ', callback_data: 'view_status_new_page_0' }],
            ]
        }
    });
};


// =================================================================
// –õ–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (State Machine)
// =================================================================

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 * @param {TelegramBot.Message} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
const handleState = (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const db = readDb();
    const user = db[chatId];

    switch (user.state) {
        case 'awaiting_japanese':
            user.stateData = { japanese: text };
            user.state = 'awaiting_furigana';
            writeDb(db);
            bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ—É—Ä–∏–≥–∞–Ω—É (—á—Ç–µ–Ω–∏–µ –Ω–∞ —Ö–∏—Ä–∞–≥–∞–Ω–µ):', {
                reply_markup: { keyboard: [['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']], resize_keyboard: true, one_time_keyboard: true },
            });
            break;

        case 'awaiting_furigana':
            user.stateData.furigana = (text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') ? '' : text;
            user.state = 'awaiting_russian';
            writeDb(db);
            bot.sendMessage(chatId, '–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:', {
                reply_markup: { remove_keyboard: true }
            });
            break;

        case 'awaiting_russian':
            user.stateData.russian = text;
            user.state = 'awaiting_topic';
            writeDb(db);
            const topicButtons = user.topics.map(topic => [topic]);
            bot.sendMessage(chatId, '–ö –∫–∞–∫–æ–π —Ç–µ–º–µ –æ—Ç–Ω–µ—Å—Ç–∏ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É? –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é.', {
                reply_markup: {
                    keyboard: topicButtons,
                    resize_keyboard: true,
                    one_time_keyboard: true,
                }
            });
            break;

        case 'awaiting_topic':
            const topic = text.trim();
            const newCard = {
                id: Date.now().toString(),
                topic: topic,
                japanese: user.stateData.japanese,
                furigana: user.stateData.furigana,
                russian: user.stateData.russian,
                repetition: 0,
                efactor: 2.5,
                interval: 0,
                nextReviewDate: new Date().toISOString(),
            };
            user.cards.push(newCard);
            if (!user.topics.includes(topic)) {
                user.topics.push(topic);
            }
            bot.sendMessage(chatId, `‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ "${newCard.japanese}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ–º—É "${topic}"!`, {
                reply_markup: {
                    keyboard: [
                        ['üß† –ò–∑—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏', 'üóÇÔ∏è –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏'],
                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
                        ['üì§ –≠–∫—Å–ø–æ—Ä—Ç', 'üì• –ò–º–ø–æ—Ä—Ç']
                    ],
                    resize_keyboard: true,
                }
            });
            user.state = null;
            user.stateData = {};
            writeDb(db);
            break;

        case 'awaiting_csv':
            if (msg.document && msg.document.mime_type.includes('csv')) {
                processCsvImport(chatId, msg.document.file_id);
            } else {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.');
            }
            user.state = null;
            writeDb(db);
            break;

        case 'awaiting_csv_text':
            const textLines = msg.text.split('\n').filter(line => line.trim() !== '');
            let count = 0;
            const userTopics = new Set(user.topics || []);

            for (const line of textLines) {
                const parts = line.split(',');
                if (parts.length < 2) continue;

                const topic = parts.length > 2 ? parts.pop().trim() : '–ë–µ–∑ —Ç–µ–º—ã';
                const russian = parts.pop().trim();
                const japanese = parts.shift().trim();
                const furigana = parts.join(',').trim(); // –í—Å–µ, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ

                if (japanese && russian) {
                    const newCard = {
                        id: `${Date.now()}-${Math.random()}`,
                        japanese,
                        furigana: furigana || '',
                        russian,
                        topic: topic || '–ë–µ–∑ —Ç–µ–º—ã',
                        repetition: 0,
                        efactor: 2.5,
                        interval: 0,
                        nextReviewDate: new Date().toISOString(),
                    };
                    user.cards.push(newCard);

                    if (topic !== '–ë–µ–∑ —Ç–µ–º—ã' && !userTopics.has(topic)) {
                        user.topics.push(topic);
                        userTopics.add(topic);
                    }
                    count++;
                }
            }

            bot.sendMessage(chatId, `‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ ${count} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.`);
            user.state = null;
            writeDb(db);
            break;
    }
};


// =================================================================
// –õ–æ–≥–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è (Callbacks)
// =================================================================

const handleStudyCallback = (callbackQuery) => {
    const { data, message } = callbackQuery;
    const chatId = message.chat.id;
    const db = readDb();
    const user = db[chatId];

    bot.deleteMessage(chatId, message.message_id).catch(() => {});

    if (data === 'study_by_topic') {
        if (!user.topics || user.topics.length === 0) {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç–µ–º. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ç–µ–º–æ–π.');
            return;
        }
        const topicButtons = user.topics.map(topic => ([{ text: topic, callback_data: `study_topic_${topic}` }]));
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:', { reply_markup: { inline_keyboard: topicButtons } });
        return;
    }

    if (data.startsWith('study_topic_')) {
        const topic = data.replace('study_topic_', '');
        bot.sendMessage(chatId, `–¢–µ–º–∞: "${topic}". –ß—Ç–æ –¥–µ–ª–∞–µ–º?`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üî• –£—á–∏—Ç—å —Ç–æ, —á—Ç–æ –ø–æ—Ä–∞', callback_data: `study_start_due_${topic}` }],
                    [{ text: 'üé≤ –£—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä—è–¥', callback_data: `study_start_all_${topic}` }],
                ]
            }
        });
        return;
    }

    let cardsToStudy = [];
    if (data === 'study_due_all') {
        cardsToStudy = user.cards.filter(c => new Date(c.nextReviewDate) <= new Date());
    } else if (data === 'study_random_all') {
        cardsToStudy = user.cards;
    } else if (data.startsWith('study_start_')) {
        const parts = data.split('_');
        const mode = parts[2];
        const topic = parts[3];
        const topicCards = user.cards.filter(c => c.topic === topic);
        if (mode === 'due') {
            cardsToStudy = topicCards.filter(c => new Date(c.nextReviewDate) <= new Date());
        } else {
            cardsToStudy = topicCards;
        }
    }

    if (cardsToStudy.length === 0) {
        bot.sendMessage(chatId, 'üéâ –û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ—Ç.');
        return;
    }

    const queue = cardsToStudy.map(c => c.id).sort(() => Math.random() - 0.5);
    user.session = { queue, currentIndex: 0 };
    writeDb(db);
    sendNextCard(chatId);
};

const sendNextCard = (chatId) => {
    const db = readDb();
    const user = db[chatId];
    const session = user.session;
    if (!session || session.currentIndex >= session.queue.length) {
        bot.sendMessage(chatId, 'üéâ –û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.');
        user.session = {}; writeDb(db); return;
    }
    const cardId = session.queue[session.currentIndex];
    const card = user.cards.find(c => c.id === cardId);
    if (!card) {
        session.currentIndex++; writeDb(db); sendNextCard(chatId); return;
    }
    let messageText; const { settings } = user;
    if (settings.frontSide === 'japanese' && settings.showFuriganaImmediately && card.furigana) {
        messageText = `**${card.japanese}**\n*${card.furigana}*`;
    } else {
        messageText = `**${settings.frontSide === 'japanese' ? card.japanese : card.russian}**`;
    }
    messageText += `\n\n*–°—Ç–∞—Ç—É—Å: ${getCardStatus(card)}*`;
    bot.sendMessage(chatId, messageText, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [[
                { text: 'üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å', callback_data: `flip_${card.id}` },
                { text: '‚úÖ –û—Ç–ª–∏—á–Ω–æ –ø–æ–º–Ω—é!', callback_data: `rate_5_${card.id}` }
            ]]
        },
    });
};

const flipCard = (callbackQuery) => {
    const { data, message, id: callbackId } = callbackQuery;
    const cardId = data.split('_')[1];
    const db = readDb();
    const user = db[message.chat.id];
    const card = user.cards.find(c => c.id === cardId);
    if (!card) { return bot.answerCallbackQuery(callbackId, { text: '–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' }); }
    const { frontSide } = user.settings;
    const frontText = frontSide === 'japanese' ? card.japanese : card.russian;
    const backText = frontSide === 'japanese' ? card.russian : card.japanese;
    let backSideMessage;
    if (frontSide === 'japanese') {
        backSideMessage = `**${frontText}**\n`;
        if (card.furigana) { backSideMessage += `*${card.furigana}*\n`; }
        backSideMessage += `---\n**${backText}**`;
    } else {
        backSideMessage = `**${frontText}**\n---\n**${backText}**\n`;
        if (card.furigana) { backSideMessage += `*${card.furigana}*\n`; }
    }
    backSideMessage += `\n\n*–°—Ç–∞—Ç—É—Å: ${getCardStatus(card)}*`;
    bot.editMessageText(backSideMessage, {
        chat_id: message.chat.id, message_id: message.message_id, parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚ùå –ù–µ –ø–æ–º–Ω—é', callback_data: `rate_0_${card.id}` },
                    { text: 'ü§î –ü–ª–æ—Ö–æ', callback_data: `rate_3_${card.id}` },
                    { text: '‚úÖ –ü–æ–º–Ω—é', callback_data: `rate_4_${card.id}` }]
            ]
        },
    });
    bot.answerCallbackQuery(callbackId);
};

const rateCard = (callbackQuery) => {
    const { data, message, id: callbackId } = callbackQuery;
    const [_action, qualityStr, cardId] = data.split('_');
    const quality = parseInt(qualityStr, 10);
    const chatId = message.chat.id;
    const db = readDb();
    const user = db[chatId];
    const session = user.session;
    if (!session || !session.queue) {
        bot.answerCallbackQuery(callbackId, { text: '–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
        bot.deleteMessage(chatId, message.message_id);
        return;
    }
    if (quality < 4) {
        const failedCardId = session.queue[session.currentIndex];
        session.queue.push(failedCardId);
        bot.answerCallbackQuery(callbackId, { text: '–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–∑–∂–µ.' });
    } else {
        const cardIndex = user.cards.findIndex(c => c.id === cardId);
        if (cardIndex !== -1) { user.cards[cardIndex] = updateCardSrs(user.cards[cardIndex], quality); }
        bot.answerCallbackQuery(callbackId);
    }
    session.currentIndex++;
    writeDb(db);
    bot.deleteMessage(chatId, message.message_id);
    sendNextCard(chatId);
};


// =================================================================
// –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
// =================================================================

const handleViewCallback = (callbackQuery) => {
    const { data, message } = callbackQuery;
    const chatId = message.chat.id;

    if (data === 'view_back_to_status') {
        bot.deleteMessage(chatId, message.message_id).catch(() => {});
        promptViewCards(chatId);
        return;
    }

    const [_action, _status, status, _page, pageStr] = data.split('_');
    const page = parseInt(pageStr, 10);
    const db = readDb();
    const user = db[chatId];
    let filteredCards = [];
    let statusTitle = '';

    if (status === 'learned') {
        filteredCards = user.cards.filter(c => c.repetition >= 5);
        statusTitle = 'üü¢ –ò–∑—É—á–µ–Ω–Ω—ã–µ';
    } else if (status === 'progress') {
        filteredCards = user.cards.filter(c => c.repetition > 0 && c.repetition < 5);
        statusTitle = 'üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ';
    } else if (status === 'new') {
        filteredCards = user.cards.filter(c => c.repetition === 0);
        statusTitle = 'üî¥ –ù–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ';
    }

    if (filteredCards.length === 0) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç.' });
        return;
    }

    const totalPages = Math.ceil(filteredCards.length / CARDS_PER_PAGE);
    const pageCards = filteredCards.slice(page * CARDS_PER_PAGE, (page + 1) * CARDS_PER_PAGE);

    let messageText = `*${statusTitle} (${page + 1}/${totalPages})*\n\n`;
    const keyboardRows = [];

    pageCards.forEach(card => {
        messageText += `*${card.japanese}* (${card.furigana || '‚Äì'}): ${card.russian}\n–¢–µ–º–∞: _${card.topic || '–ë–µ–∑ —Ç–µ–º—ã'}_\n\n`;
        keyboardRows.push([{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å "${card.japanese}"`, callback_data: `delete_confirm_${card.id}` }]);
    });

    const paginationRow = [];
    if (page > 0) {
        paginationRow.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `view_status_${status}_page_${page - 1}` });
    }
    if (page < totalPages - 1) {
        paginationRow.push({ text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: `view_status_${status}_page_${page + 1}` });
    }
    if (paginationRow.length > 0) {
        keyboardRows.push(paginationRow);
    }
    keyboardRows.push([{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞', callback_data: 'view_back_to_status' }]);

    bot.editMessageText(messageText, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboardRows }
    }).catch(() => {});
    bot.answerCallbackQuery(callbackQuery.id);
};

const handleDeleteCallback = (callbackQuery) => {
    const { data, message } = callbackQuery;
    const chatId = message.chat.id;
    const [_action, command, cardId] = data.split('_');
    const db = readDb();
    const user = db[chatId];
    const card = user.cards.find(c => c.id === cardId);

    if (!card && command !== 'cancel') {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.' });
        return;
    }

    if (command === 'confirm') {
        bot.editMessageReplyMarkup({
            inline_keyboard: [
                [{ text: `–£–¥–∞–ª–∏—Ç—å "${card.japanese}"?`, callback_data: 'delete_noop' }],
                [{ text: '‚úÖ –î–∞', callback_data: `delete_execute_${cardId}` }, { text: '‚ùå –ù–µ—Ç', callback_data: `delete_cancel` }]
            ]
        }, { chat_id: chatId, message_id: message.message_id });
        bot.answerCallbackQuery(callbackQuery.id);
    } else if (command === 'execute') {
        user.cards = user.cards.filter(c => c.id !== cardId);
        writeDb(db);
        bot.deleteMessage(chatId, message.message_id).catch(() => {});
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.' });
        promptViewCards(chatId);
    } else if (command === 'cancel') {
        bot.deleteMessage(chatId, message.message_id).catch(() => {});
        bot.answerCallbackQuery(callbackQuery.id, { text: '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.' });
        promptViewCards(chatId);
    }
};


// =================================================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç
// =================================================================

const showSettings = (chatId, messageId = null) => {
    const { settings } = readDb()[chatId];
    const frontSideText = settings.frontSide === 'japanese' ? '–Ø–ø–æ–Ω—Å–∫–∏–π' : '–†—É—Å—Å–∫–∏–π';
    const furiganaText = settings.showFuriganaImmediately ? '–î–∞' : '–ù–µ—Ç';
    const messageText = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n- –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: **${frontSideText}**\n- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ—É—Ä–∏–≥–∞–Ω—É —Å—Ä–∞–∑—É: **${furiganaText}**`;
    const keyboard = {
        inline_keyboard: [
            [{ text: `–°–º–µ–Ω–∏—Ç—å –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –Ω–∞ "${settings.frontSide === 'japanese' ? '–†—É—Å—Å–∫–∏–π' : '–Ø–ø–æ–Ω—Å–∫–∏–π'}"`, callback_data: 'settings_toggle_front' }],
            [{ text: settings.showFuriganaImmediately ? "–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ—É—Ä–∏–≥–∞–Ω—É —Å—Ä–∞–∑—É" : "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ—É—Ä–∏–≥–∞–Ω—É —Å—Ä–∞–∑—É", callback_data: 'settings_toggle_furigana' }]
        ]
    };
    if (messageId) {
        bot.editMessageText(messageText, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }).catch(() => {});
    } else {
        bot.sendMessage(chatId, messageText, { parse_mode: 'Markdown', reply_markup: keyboard });
    }
};

const handleSettingsCallback = (callbackQuery) => {
    const { data, message, id: callbackId } = callbackQuery;
    const db = readDb();
    const user = db[message.chat.id];
    let isChanged = false;
    if (data === 'settings_toggle_front') {
        user.settings.frontSide = user.settings.frontSide === 'japanese' ? 'russian' : 'japanese';
        bot.answerCallbackQuery(callbackId, { text: `–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!` });
        isChanged = true;
    } else if (data === 'settings_toggle_furigana') {
        user.settings.showFuriganaImmediately = !user.settings.showFuriganaImmediately;
        bot.answerCallbackQuery(callbackId, { text: `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ—É—Ä–∏–≥–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∞!` });
        isChanged = true;
    }
    if (isChanged) {
        writeDb(db);
        showSettings(message.chat.id, message.message_id);
    } else {
        bot.answerCallbackQuery(callbackId);
    }
};

const handleImportCallback = (callbackQuery) => {
    const { data, message } = callbackQuery;
    const chatId = message.chat.id;
    const method = data.split('_')[2];
    const db = readDb();
    if (method === 'file') {
        db[chatId].state = 'awaiting_csv';
        bot.editMessageText('–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ CSV-—Ñ–∞–π–ª.', { chat_id: chatId, message_id: message.message_id });
    } else if (method === 'text') {
        db[chatId].state = 'awaiting_csv_text';
        bot.editMessageText('–•–æ—Ä–æ—à–æ, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n–§–æ—Ä–º–∞—Ç:\n`—è–ø–æ–Ω—Å–∫–∏–π,—Ñ—É—Ä–∏–≥–∞–Ω–∞,—Ä—É—Å—Å–∫–∏–π,—Ç–µ–º–∞`\n`—è–ø–æ–Ω—Å–∫–∏–π,—Ä—É—Å—Å–∫–∏–π,—Ç–µ–º–∞`\n`—è–ø–æ–Ω—Å–∫–∏–π,—Ä—É—Å—Å–∫–∏–π`\n\n–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.', {
            chat_id: chatId, message_id: message.message_id, parse_mode: 'Markdown'
        });
    }
    writeDb(db);
    bot.answerCallbackQuery(callbackQuery.id);
};

const exportCards = (chatId) => {
    try {
        const user = readDb()[chatId];
        if (!user || !user.cards || user.cards.length === 0) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
        }
        const header = 'japanese,furigana,russian,topic\n';
        const rows = user.cards.map(c => {
            const jap = c.japanese || ''; const furi = c.furigana || ''; const rus = c.russian || ''; const top = c.topic || '';
            return `"${jap.replace(/"/g, '""')}","${furi.replace(/"/g, '""')}","${rus.replace(/"/g, '""')}","${top.replace(/"/g, '""')}"`;
        }).join('\n');
        const fileBuffer = Buffer.from(header + rows, 'utf-8');
        bot.sendDocument(chatId, fileBuffer, {}, { filename: 'my_japanese_cards.csv', contentType: 'text/csv' });
    } catch (error) {
        console.error('[Export Error]:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
    }
};

const processCsvImport = (chatId, fileId) => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ "topic"
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –µ–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const db = readDb();
    const user = db[chatId];
    let importedCount = 0;
    bot.getFileStream(fileId).pipe(csv({ headers: ['japanese', 'furigana', 'russian', 'topic'] }))
        .on('data', (row) => {
            if (row.japanese && row.russian) {
                user.cards.push({
                    id: `${Date.now()}-${Math.random()}`,
                    japanese: row.japanese.trim(),
                    furigana: row.furigana ? row.furigana.trim() : '',
                    russian: row.russian.trim(),
                    topic: row.topic ? row.topic.trim() : '–ë–µ–∑ —Ç–µ–º—ã',
                    repetition: 0, efactor: 2.5, interval: 0,
                    nextReviewDate: new Date().toISOString(),
                });
                importedCount++;
            }
        })
        .on('end', () => {
            writeDb(db);
            bot.sendMessage(chatId, `‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ ${importedCount} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.`);
        });
};


// =================================================================
// –≠–∫—Å–ø–æ—Ä—Ç
// =================================================================

module.exports = {
    messageHandler,
    callbackHandler
};